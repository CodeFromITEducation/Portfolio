@{
    ViewData["Title"] = "JavaScript";
}
<script src="~/js/collapse.js"></script>
<div class='canvas'>
<h1>Javascript</h1>
<p>Welcome to the documentation to Javascript it is here you will find some of the advanced terminology I know<br>
   inside a table and 2 places I've coded Javascript. One thing I'd like to share is that JS isn't my best language.<br>
  didn't get much exposure as I wanted to. However I am working on it.</p>

   <table class="Coding">
    <thead> 
      <tr>
       <th>Term</th>
       <th>Definition</th>
      </tr>
    </thead>
   <tbody> 
      <tr>
       <td> Class</td>
       <td> Template used for many things such as constructors, methods, and the 4 pillars<br>
        of object oriented programming.</td>
      </tr>

      <tr>
          <td>Method</td>
          <td>Here in javascript methods are different from the traditional C# or Java that I learned about.<br>
             They can still be used in the same ways just has a bit more of a differentiation to it. You have<br>
             methods dedicated to specific things. 
           </td>
         </tr>
         <tr>
          <td>Constructor</td>
          <td>Special type of function called to create an object. It creates objects using arguments<br>
              along with variables that have the proper scope within a class.</td>
         </tr>
      <tr>
          <td>Try Catch block</td>
          <td>Way to dictate error messages as well as print errors if you dislike debugging<br>
           this is an alternative depending on the circumstance is a very useful piece of code.</td>
      </tr>
      <tr>
          <td>Function</td>
          <td>Another way of saying procedure kind of similar to a method in that it lets<br>
              you complete a task. Few tasks that I've done include creating a calender table,<br>
              resizing text, and make a calculator.</td>
      </tr>
      <tr>
          <td>Javascript</td>
          <td>Programming language crucial to many innovations in the world of web development<br>
              one way I've used it is with JSP Java server page. You can code with many languages inside JSP.  
          </td>
      </tr>
      <tr>
          <td>SQL</td>
          <td>Programming language that can be integrated to Javascript and many other programming<br>
          languages to provide the power of CRUD(Create Read Update Delete) to a database.</td>
      </tr>
      <tr>
          <td>Node.js</td>
          <td>Programming language part of javascript used for database connectivity. Another important thing<br>
            it is used for is a server. Basically it allows you to run javascript on the server. 
          </td>
      </tr>
      <tr>
          <td>Bootstrap</td>
          <td>CSS Framework that offers Javascript templates optionally.</td>
      </tr>      
   </tbody>
  </table>
  <p>For my first project we have tic tac toe this project is integrated into the website via this link.</p>    
    <a asp-controller="Home" asp-action="Tic">Tic Tac Toe</a><br>
    <button class="collapsible">Code Explanation</button>
    <div class="content">

    <p>The Tic Tac Toe game logic is structured around a simple model of the game board, represented by a 3x3 grid.<br>
       This grid is managed through a combination of HTML and JavaScript, where each cell in the grid is an input<br> 
       element with a unique ID.</p>

    <p><strong>Checking for a Win:</strong><br> 
    The core function, <code>myfunc()</code>, checks the value of each cell after every move to determine<br> 
    if there's a winning combination. A win is declared if any row, column, or diagonal has the same player's symbol<br> 
    (either 'X' or 'O'). This is achieved by comparing the values of the cells. If a winning pattern is detected,<br> 
    the game announces the winner and disables further interactions with the grid to prevent additional moves.</p>

    <p><strong>Player Turns:</strong> The game alternates turns between two players, starting with Player X.<br> 
        This is controlled by a flag variable that toggles between each player's turn. On each cell click,<br> 
        the game checks this flag to determine which player's symbol to place in the selected cell and then<br> 
        switches the flag in preparation for the next turn.</p>

<p><strong>Reset Functionality:</strong> The <code>myfunc_2()</code> function implements the game reset feature.<br> 
    It reloads the page to start a new game, ensuring all cells are cleared and the game state is reset. This<br>
    approach simplifies state management by using the browser's native page reload functionality instead of manually<br> 
    resetting each element.</p>

<p>This implementation showcases basic DOM manipulation, event handling, and conditional logic to create an interactive<br> 
    game experience without relying on external libraries or frameworks.</p>
</div>    

   <p><br>For the second project I have a program that uses node.js as well as CRUD to save quotes inside of the vscode terminal<br> 
    I have a similar console application I did in C# inspired by this. Down below here you can see the code I'm working with<br>
    you can also collapse the full code if you like to go by increment.
   </p>
</div>